const { Telegraf, Markup } = require("telegraf");
const { PrismaClient } = require("@prisma/client");
const fs = require("fs");
const path = require("path");
require("dotenv").config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const adminBot = new Telegraf(process.env.ADMIN_BOT_TOKEN);
const prisma = new PrismaClient();
const userSessions = new Map();

const mainKeyboard = {
  keyboard: [
    [{ text: "üçÄ –ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã" }, { text: "üí∏ –û–ø–ª–∞—Ç–∞" }],
    [{ text: "üìç –ê–¥—Ä–µ—Å" }, { text: "‚ÑπÔ∏è –û –Ω–∞—Å" }],
  ],
  resize_keyboard: true,
  one_time_keyboard: true,
};

const backToMain = {
  keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥" }]],
  resize_keyboard: true,
  one_time_keyboard: true,
};

const categoriesKeyboard = {
  keyboard: [
    [{ text: "üê§ –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã" }, { text: "üíÑ –ö–æ—Å–º–µ—Ç–∏–∫–∞" }],
    [{ text: "üßº –ì–∏–≥–∏–µ–Ω–∞" }, { text: "üè† –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞" }],
    [{ text: "üîô –ù–∞–∑–∞–¥" }],
  ],
  resize_keyboard: true,
  one_time_keyboard: true,
};

bot.start((ctx) => {
  ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", {
    reply_markup: mainKeyboard,
  });
});

bot.hears("üçÄ –ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã", (ctx) => {
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", {
    reply_markup: categoriesKeyboard,
  });
});

bot.hears("üí∏ –û–ø–ª–∞—Ç–∞", (ctx) => {
  ctx.reply(
    "<b>–î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã:</b>\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <code>5614680516983760</code>\n–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã: <u>Nurxanova Madina</u>\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: +998946667410",
    {
      reply_markup: backToMain,
      parse_mode: "HTML",
    }
  );
});

bot.hears("üìç –ê–¥—Ä–µ—Å", (ctx) => {
  ctx.reply(
    "–ù–∞—à –∞–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1\n\nhttps://www.google.com/maps?q=41.416103,69.312097",
    {
      reply_markup: backToMain,
    }
  );
});

bot.hears("‚ÑπÔ∏è –û –Ω–∞—Å", (ctx) => {
  ctx.reply(
    "<b>Greenleaf (Suzhou Greenleaf Daily Commodity Co. Ltd)</b> ‚Äî –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –∏–∑ –ö–∏—Ç–∞—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –≤ 1998 –≥–æ–¥—É. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ —ç–∫–æ—Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–ø—Ä–æ—Å–∞, –±–æ–ª–µ–µ 3 500 –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ—â–Ω–æ—Å—Ç–∏ ‚Äî 80 000 —Ç–æ–Ω–Ω –≤ –≥–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏, –§—Ä–∞–Ω—Ü–∏–∏ –∏ –ò—Ç–∞–ª–∏–∏. Greenleaf –∏–º–µ–µ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ 30+ —Å—Ç—Ä–∞–Ω–∞—Ö, –≤ —Ç–æ–º —á–∏—Å–ª–µ –≤ –†–æ—Å—Å–∏–∏ –∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ —á–µ—Ä–µ–∑ –û–û–û ¬´–ó–µ–ª—ë–Ω—ã–π –ª–∏—Å—Ç¬ª. –í—Ö–æ–¥–∏—Ç –≤ –¢–û–ü-100 –º–∏—Ä–æ–≤—ã—Ö MLM-–∫–æ–º–ø–∞–Ω–∏–π.\n\n<b>–ú–∏—Å—Å–∏—è:</b> —Å–¥–µ–ª–∞—Ç—å –ª—é–¥–µ–π —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ, –∑–¥–æ—Ä–æ–≤–µ–µ, –∫—Ä–∞—Å–∏–≤–µ–µ –∏ –±–æ–≥–∞—á–µ.",
    {
      reply_markup: backToMain,
      parse_mode: "HTML",
    }
  );
});

bot.hears("üîô –ù–∞–∑–∞–¥", (ctx) => {
  ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
    reply_markup: mainKeyboard,
  });
});

bot.hears("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", (ctx) => {
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", {
    reply_markup: categoriesKeyboard,
  });
});

async function sendProductsByCategory(ctx, categoryId) {
  const products = await prisma.product.findMany({
    where: { categoryId },
  });

  if (!products.length) {
    return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üò¢", {
      reply_markup: categoriesKeyboard,
    });
  }

  ctx.reply("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:", {
    reply_markup: {
      keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" }]],
      resize_keyboard: true,
    },
  });

  for (const product of products) {
    const imagePath = path.join(__dirname, "..", "public", product.image);
    if (fs.existsSync(imagePath)) {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback("üõí –ö—É–ø–∏—Ç—å", `buy_${product.id}`)],
      ]);
      await ctx.replyWithPhoto(
        { source: fs.createReadStream(imagePath) },
        {
          caption: `*${product.name}*\n\n${product.description}`,
          parse_mode: "Markdown",

          ...keyboard,
        }
      );
    } else {
      ctx.reply(`‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è ${product.name}`);
    }
  }
}

bot.hears("üê§ –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã", (ctx) => sendProductsByCategory(ctx, 1));
bot.hears("üíÑ –ö–æ—Å–º–µ—Ç–∏–∫–∞", (ctx) => sendProductsByCategory(ctx, 2));
bot.hears("üßº –ì–∏–≥–∏–µ–Ω–∞", (ctx) => sendProductsByCategory(ctx, 3));
bot.hears("üè† –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞", (ctx) => sendProductsByCategory(ctx, 4));

bot.action(/^buy_(\d+)$/, async (ctx) => {
  const productId = parseInt(ctx.match[1]);
  const product = await prisma.product.findUnique({ where: { id: productId } });

  if (!product) return ctx.reply("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");

  userSessions.set(ctx.from.id, { step: "awaiting_phone", product });

  await ctx.answerCbQuery();
  await ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: +998901234567):",
    {
      reply_markup: {
        keyboard: [
          [{ text: "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact: true }],
          [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
});

bot.on("text", (ctx) => {
  const session = userSessions.get(ctx.from.id);

  if (session && session.step === "awaiting_phone") {
    const phone = ctx.message.text.trim();
    const phoneRegex = /^\+?\d{7,15}$/;

    if (!phoneRegex.test(phone)) {
      return ctx.reply(
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: +998901234567):"
      );
    }

    session.phone = phone;
    session.step = "awaiting_location";

    return ctx.reply("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", {
      reply_markup: {
        keyboard: [
          [{ text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location: true }],
          [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  if (session && session.step === "awaiting_location") {
    return ctx.reply(
      "‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä—É—á–Ω—É—é"
    );
  }
});

bot.on("contact", (ctx) => {
  const session = userSessions.get(ctx.from.id);
  if (!session || session.step !== "awaiting_phone") return;

  const phone = ctx.message.contact.phone_number;

  session.phone = phone;
  session.step = "awaiting_location";

  ctx.reply("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", {
    reply_markup: {
      keyboard: [
        [{ text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location: true }],
        [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" }],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

bot.on("location", (ctx) => {
  const session = userSessions.get(ctx.from.id);
  if (!session || session.step !== "awaiting_location") return;

  const { latitude, longitude } = ctx.message.location;
  session.location = `https://maps.google.com/?q=${latitude},${longitude}`;

  sendToAdminBot(session, ctx);
  userSessions.delete(ctx.from.id);
});

async function sendToAdminBot(session, ctx) {
  const caption = `<b>üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó üÜï</b>\n\n<b>–¢–æ–≤–∞—Ä:</b> ${
    session.product.name
  }\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${session.phone}\n<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> ${
    session.location
  }\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${ctx.from.first_name} ${
    ctx.from.last_name || ""
  } (@${ctx.from.username || "–Ω–µ—Ç"})`;

  const imagePath = path.join(__dirname, "..", "public", session.product.image);

  try {
    await adminBot.telegram.sendPhoto(
      process.env.ADMIN_CHAT_ID,
      { source: imagePath },
      { caption, parse_mode: "HTML" }
    );

    await ctx.reply("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –°–ø–∞—Å–∏–±–æ!", {
      reply_markup: mainKeyboard,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:", error);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞. –ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ");
  }
}

bot.launch();

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
